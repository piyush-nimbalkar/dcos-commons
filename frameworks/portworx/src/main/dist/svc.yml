name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
  user: {{FRAMEWORK_USER}}
pods:
  portworx:
    count: {{NODE_COUNT}}
    resource-sets:
      px-resources:
        cpus: {{NODE_CPUS}}
        memory: {{NODE_MEM}}
    placement: {{NODE_PLACEMENT}}
    tasks:
      install:
        goal: FINISHED
        resource-set: px-resources
        cmd: >
                {{#LIGHTHOUSE_ENABLED}}
                if [ $POD_INSTANCE_INDEX -eq "0" ]; then
                    authkey=$(echo -n {{{LIGHTHOUSE_ADMIN_EMAIL}}}:admin | base64)
                    token=$(LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/lib64 curl -X POST \
                        -H "Accept:application/json" -H "Authorization:Basic $authkey" \
                        http://lighthouse-0-start.{{FRAMEWORK_NAME}}.mesos:{{LIGHTHOUSE_WEBUI_PORT}}/api/clusters/create/\?name\={{PORTWORX_CLUSTER_NAME}}\&clusterid\={{PORTWORX_CLUSTER_NAME}});
                fi
                {{/LIGHTHOUSE_ENABLED}}

                PWX_TOKEN=$(LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/lib64 curl -X GET http://etcd-proxy-0-start.{{FRAMEWORK_NAME}}.mesos:2379/v2/keys/pwx/{{PORTWORX_CLUSTER_NAME}}/lighthouse/cluster/config/{{PORTWORX_CLUSTER_NAME}} | jq -r ".node" | jq -r ".value"| jq -r ".token")

                echo "[Unit]
                    Description=Portworx Container
                    Wants=docker.service
                    After=docker.service
                    StartLimitIntervalSec=3600
                    StartLimitBurst=10000
                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=/usr/bin/ping -c 1 master.mesos
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm -f %n
                    ExecStart=/usr/bin/docker run --net=host --privileged=true \
                          --cgroup-parent=/system.slice/px-enterprise.service \
                          -v /run/docker/plugins:/run/docker/plugins     \
                          -v /var/lib/osd:/var/lib/osd:shared            \
                          -v /dev:/dev                                   \
                          -v /etc/pwx:/etc/pwx                           \
                          -v /opt/pwx/bin:/export_bin:shared             \
                          -v /var/run/docker.sock:/var/run/docker.sock   \
                          -v /var/cores:/var/cores                       \
                          -v /lib/modules:/lib/modules                   \
                          {{#LIGHTHOUSE_ENABLED}}
                          -e API_SERVER=http://lighthouse-0-start.{{FRAMEWORK_NAME}}.mesos:{{LIGHTHOUSE_WEBUI_PORT}} \
                          {{/LIGHTHOUSE_ENABLED}}
                          --name=%n \
                          portworx/{{{PORTWORX_IMAGE_NAME}}} -c {{PORTWORX_CLUSTER_NAME}} {{{PORTWORX_OPTIONS}}} \
                          {{#LIGHTHOUSE_ENABLED}}
                          -t $PWX_TOKEN
                          {{/LIGHTHOUSE_ENABLED}}
                          {{^LIGHTHOUSE_ENABLED}}
                          -k {{PORTWORX_KVDB}}
                          {{/LIGHTHOUSE_ENABLED}}
                    KillMode=control-group
                    ExecStop=/usr/bin/docker stop -t 10 %n
                    [Install]
                    WantedBy=multi-user.target" > /etc/systemd/system/portworx.service &&
                ln -sf /etc/systemd/system/portworx.service /etc/systemd/system/dcos.target.wants/portworx.service &&
                systemctl daemon-reload &&
                systemctl enable portworx && 
                systemctl start portworx
        readiness-check:
          cmd: /opt/pwx/bin/pxctl status
          interval: 5
          delay: 0
          timeout: 60

  etcd-cluster:
    count: 1
    image: mesosphere/etcd-mesos:latest
    tasks:
      start:
        goal: RUNNING
        memory: 1024
        cpus: 0.5
        cmd: >
            /work/bin/etcd-mesos-scheduler -alsologtostderr=true \
                -address=${LIBPROCESS_IP} \
                -framework-name=${FRAMEWORK_NAME} \
                -failover-timeout-seconds=${FRAMEWORK_FAILOVER_TIMEOUT_SECONDS} \
                -cluster-size={{ETCD_COUNT}} \
                -master=${MESOS_MASTER} \
                -zk-framework-persist=${ZK_PERSIST} \
                -v=${VERBOSITY} \
                -single-instance-per-slave=${SINGLE_INSTANCE_PER_SLAVE} \
                -auto-reseed=${AUTO_RESEED} \
                -reseed-timeout=${RESEED_TIMEOUT} \
                -sandbox-disk-limit=${DISK_LIMIT} \
                -sandbox-cpu-limit={{ETCD_CPUS}} \
                -sandbox-mem-limit={{ETCD_MEM}} \
                -admin-port=${PORT0} \
                -driver-port=${PORT1} \
                -artifact-port=${PORT2} \
                -framework-weburi=${WEBURI}
        env:
          FRAMEWORK_NAME: portworx.etcd
          FRAMEWORK_FAILOVER_TIMEOUT_SECONDS: 30
          MESOS_MASTER: zk://master.mesos:2181/mesos
          ZK_PERSIST: zk://master.mesos:2181/dcos-service-{{FRAMEWORK_NAME}}
          VERBOSITY: 1
          SINGLE_INSTANCE_PER_SLAVE: true
          AUTO_RESEED: true
          RESEED_TIMEOUT: 240
          DISK_LIMIT: 4096
          PORT0: 0
          PORT1: 1
          PORT2: 2
    
  etcd-proxy:
    count: 1
    image: mesosphere/etcd-mesos:latest
    tasks:
      start:
        goal: RUNNING
        memory: 512
        cpus: 0.3
        cmd: /work/bin/etcd --proxy=on --discovery-srv=${FRAMEWORK_NAME}.mesos --listen-client-urls 'http://0.0.0.0:2379'
        readiness-check:
          cmd: /work/bin/etcdctl cluster-health
          interval: 5
          delay: 0
          timeout: 60
  influxdb:
    count: 1
    image: influxdb:latest
    placement: {{INFLUXDB_PLACEMENT}}
    tasks:
      start:
        goal: RUNNING
        memory: {{INFLUXDB_MEM}}
        cpus: {{INFLUXDB_CPUS}}
        cmd: > 
          export INFLUXDB_META_DIR=$MESOS_SANDBOX/influxdb/meta &&
          export INFLUXDB_DATA_DIR=$MESOS_SANDBOX/influxdb/data &&
          export INFLUXDB_DATA_WAL_DIR=$MESOS_SANDBOX/influxdb/wal &&
          influxd
        volume:
          path: "influxdb"
          type: ROOT
          size: 25
  lighthouse:
    count: 1
    image: portworx/px-lighthouse:latest
    placement: {{LIGHTHOUSE_PLACEMENT}}
    tasks:
      start:
        goal: RUNNING
        memory: {{LIGHTHOUSE_MEM}}
        cpus: {{LIGHTHOUSE_CPUS}}
        cmd: >
            LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu curl -X POST http://admin:password@influxdb-0-start.${FRAMEWORK_NAME}.mesos:8086/query --data-urlencode "q=CREATE DATABASE px_stats" &&
            /bin/bash /lighthouse/on-prem-entrypoint.sh -d http://admin:password@influxdb-0-start.${FRAMEWORK_NAME}.mesos:8086/ -k {{PORTWORX_KVDB}}
        env:
          PWX_LH_PORT: {{LIGHTHOUSE_WEBUI_PORT}}
          PWX_PX_PRECREATE_ADMIN: true
          PWX_PX_COMPANY_NAME: {{LIGHTHOUSE_COMPANY_NAME}}
          PWX_PX_ADMIN_EMAIL: {{{LIGHTHOUSE_ADMIN_EMAIL}}}
        readiness-check:
          cmd: LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu curl -X GET http://lighthouse-0-start.${FRAMEWORK_NAME}.mesos:{{LIGHTHOUSE_WEBUI_PORT}}/api/system | grep Lighthouse | grep 2
          interval: 5
          delay: 0
          timeout: 60
plans:
  deploy:
    strategy: serial
    phases:
      {{#ETCD_ENABLED}}
      etcd-cluster:
        strategy: serial
        pod: etcd-cluster
        steps:
          - default : [[start]]
      etcd-proxy:
        strategy: serial
        pod: etcd-proxy
        steps:
          - default : [[start]]
      {{/ETCD_ENABLED}}
      {{#LIGHTHOUSE_ENABLED}}
      influxdb-deploy:
        strategy: serial
        pod: influxdb 
        steps:
          - default : [[start]]
      lighthouse-deploy:
        strategy: serial
        pod: lighthouse 
        steps:
          - default : [[start]]
      {{/LIGHTHOUSE_ENABLED}}
      portworx-deploy:
        strategy: serial
        pod: portworx
        steps:
          - default : [[install]]
